<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>辰述丨请您听我说</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chenshu.xyz/"/>
  <updated>2020-11-26T14:50:22.100Z</updated>
  <id>http://chenshu.xyz/</id>
  
  <author>
    <name>Xiaochen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>进程同步为什么不叫进程协调？</title>
    <link href="http://chenshu.xyz/posts/undefined/"/>
    <id>http://chenshu.xyz/posts/undefined/</id>
    <published>2020-10-29T14:28:54.128Z</published>
    <updated>2020-11-26T14:50:22.100Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>今天刚学完进程同步机制，突然感觉书中说来说去的进程同步，到头来还是没说清为什么要进行同步？同步了个啥？只是给出了很多概念。我觉得进程同步问题所牵扯到的知识还真是不少，所以打算记录下来，顺便梳理一下我的思路。如有错误，欢迎指出。</p><h2 id="1-进程同步概述">1. 进程同步概述</h2><h3 id="1-1-什么是进程同步？">1.1 什么是进程同步？</h3><p>这是百度词条给出的解释：在多道程序环境下，进程是并发执行的，不同进程之间存在着不同的相互制约关系。我倒觉得百度的解释还有些道理，其实最主要的就是这个<strong>相互制约关系</strong>，这点我们一会再说。</p><p>在 OS 中，<strong>同步</strong>强调的是多个进程在并发执行环境下<strong>异步</strong>执行时，各个进程之间的<strong>协调</strong>。也就是说，<u>进程只要协调着运行，就可以说这些进程之间是同步的</u>。</p><p>如果非要刨根问底的话，我们需要先知道同步是什么意思：同步指两个或两个以上随时间变化的量在变化过程中保持一定的相对关系。这里的量可以换成进程，这里的相对关系可以换成间接/直接相互制约关系。</p><p>到这里，你只需要知道进程同步就是用来协调进程之间的各种相互制约关系就行了，下面讨论这类制约关系。</p><h3 id="1-2-进程之间的各种相互制约关系">1.2 进程之间的各种相互制约关系</h3><p>这些关系大体分为两类：</p><ul><li>间接相互制约关系<br>也称互斥关系，由多进程对同一资源（临界资源）的共享引发，必须由系统实施统一分配，例如篮球比赛中的「篮球」就引发了双方队员的间接相互制约关系。</li><li>直接相互制约关系<br>由进程执行环境/条件发生改变而引发，源于多个进程之间的相互合作，例如生产者-消费者问题中，生产者和消费者之间就产生了直接相互制约关系。</li></ul><p>因此，我们必须引用一种制度来<strong>维持</strong>进程间复杂的相互制约关系，而这正是进程同步的主要任务。</p><p>还有一种说法是：“为了解决进程的异步性带来的结果不可再现问题”。不过我认为这种说法没有说到点上，因为真正让结果不可再现的不是异步执行，而是多个异步执行的进程并发执行起来的不协调，<u>这种不协调破坏了进程之间的相互制约关系</u>，所以才需要进程同步来协调。</p><p>那么，该怎么实现进程同步呢？</p><h3 id="1-3-怎么实现进程同步？">1.3 怎么实现进程同步？</h3><p>这个问题可以换个问法：该怎么维持进程间复杂的相互制约关系？</p><ul><li>对于间接相互制约关系，主要是临界资源产生的，这需要采用互斥方式来维持。</li><li>对于直接相互制约关系，主要是进程之间的相互依赖而产生的，这需要协调各进程之间的执行次序，继而就维持了进程之间的直接相互制约关系。</li></ul><p>思路有了，就该考虑怎么实现了。为了实现进程同步，需要在操作系统的进程管理功能的实现中，引入进程同步机制，这主要包括硬件同步机制、信号量机制、管程机制等。</p><p>其中信号量机制中的信号量是一个非常关键的概念，只要你把信号量理解清楚了，你就掌握了该怎么实现共享资源的互斥访问、同时访问。</p><h2 id="2-一些基本概念">2. 一些基本概念</h2><p>要想搞明白什么是进程同步机制，这些概念你必须先理清楚。</p><h3 id="2-1-在进程同步中，临界资源不单纯指临界资源">2.1 在进程同步中，临界资源不单纯指临界资源</h3><p>共享资源都应该当成临界资源处理，不管它是需要互斥访问，还是可以被多个进程同时访问。对于临界资源，这样做可以保证单进程对它进行互斥访问；对于其他共享资源，这样做可以保证多进程对它进行有条不紊的共享访问。</p><p>因此，对共享资源进行访问的代码片段都应该放在下面要讲到的临界区中。</p><p><u>所以下面的提到的临界资源就指的是共享资源，而不单只临界资源了。</u>那么该如何区分某个资源的共享方式（互斥共享方式或同时访问方式）呢？看信号量 S 的取值。</p><h3 id="2-2-建立临界区：硬件-软件临界资源共享解决方案">2.2 建立临界区：硬件/软件临界资源共享解决方案</h3><p>为了解决问题，我们可以把<strong>访问临界资源的循环进程</strong>的<strong>执行方案</strong>给抽象化了，用伪代码表示为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (TURE) &#123;</span><br><span class="line">进入区</span><br><span class="line">临界区</span><br><span class="line">退出区</span><br><span class="line">剩余区</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>临界区是指每个进程中访问临界资源的那段代码。顺便提一下，剩余区中所包含的代码片段并不是连续的，它可以穿插在不同区域当中，但通常不放在进入区中，因为这样做会造成资源浪费，我们应该花费最精炼的代码（时间复杂度最小）去判断一个进程是否可以进入到临界区中。</p><h2 id="3-浅谈进程同步机制">3. 浅谈进程同步机制</h2><p>进程同步机制也可以换一个说法，就是协调进程运行的机制。</p><p>这里仅给出几种进程同步机制的问题解决思路，如果有时间的话，再详细的讨论下。</p><h3 id="3-1-面临的主要问题">3.1 面临的主要问题</h3><p>从上面的进程关系中可以得知，目前进程同步所面临的最大问题，就是如何协调具有「直接相互制约关系的进程们」对「软/硬件临界资源」的<strong>互斥访问</strong>顺序。</p><p>又从<strong>建立临界区</strong>这一解决方案中得知，这个问题现在演变成了解决诸进程如何互斥地进入临界区的问题。</p><h3 id="3-2-硬件同步机制">3.2 硬件同步机制</h3><p>引入一个标志，把它当成一个锁，“锁开”进入，“锁关”等待，并且为防止多个进程同时测试到锁打开的情况，测试和关锁操作必须是连续的，不允许分开进行。</p><p>此时，问题就变成了如何把测试和关锁两个操作变成一个连续的、完整的操作。</p><h3 id="3-3-信号量机制">3.3 信号量机制</h3><p>针对多个并发进程仅共享一个临界资源，可采用整型信号量、记录型信号量等。</p><p>针对多个并发进程序共享两个或更多的共享资源，可采用 AND 型信号量、信号量集（改进版 AND 型信号量集）等。</p><p>这些机制之间存在很大的联系，因为他们共同的特点是都在各自的 PV 操作中引入了信号量这一变量。</p><h2 id="后记">后记</h2><p>关于为什么不把进程同步叫做进程协调，我只是觉得进程同步比进程协调听起来更抽象一些。在这里，把它当成协调更容易理解。但要想让一组进程有条不紊地运行，光解决上面描述的互斥问题和同步问题是远远不行的，例如还有进程该如何调度的问题（即计算机系统资源该如何分配或释放的问题）、进程同步过程中存在的死锁问题（进程调度所要解决的一个难题）……</p><p>因此，同步的意义不仅仅在于去解决一两种问题，而在于与其他进程管理功能结合起来，共同完成「进程管理」这一项艰巨的任务。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;今天刚学完进程同步机制，突然感觉书中说来说去的进程同步，到头来还是没说清为什么要进行同步？同步了个啥？只是给出了很多概念。我觉得进程同步问题所牵扯到的知识还真是不少，所以打算记录下来，顺便梳理一下我的思路。如有错误，欢迎指出。&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="操作系统" scheme="http://chenshu.xyz/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>浅析逻辑代数、命题逻辑、一阶逻辑、高阶逻辑和数理逻辑</title>
    <link href="http://chenshu.xyz/posts/undefined/"/>
    <id>http://chenshu.xyz/posts/undefined/</id>
    <published>2020-04-05T00:33:54.348Z</published>
    <updated>2020-11-02T14:08:54.149Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>此文是在本人学习完离散数学中的数理逻辑部分后，对标题中各部分之间的联系存在很大的疑惑。特此进行总结，水平有限，如有错误，欢迎指出。</p><a id="more"></a><h2 id="1-从逻辑代数开始">1. 从逻辑代数开始</h2><p><img src="https://chenshu-1301542311.cos.ap-chengdu.myqcloud.com/typora/%E4%B9%94%E6%B2%BB%C2%B7%E5%B8%83%E5%B0%94(George%C2%B7Boole).jpg" alt="George·Boole"></p><p>逻辑代数是一种用于描述客观事物逻辑关系的数学方法，由英国科学家乔治·布尔(George·Boole)于19世纪中叶提出，因而又称<u>布尔代数</u>。</p><p>所谓逻辑代数，就是把逻辑推理过程代数化，即把逻辑推理过程符号化。</p><h2 id="2-从逻辑代数到命题逻辑">2. 从逻辑代数到命题逻辑</h2><p>同样的，命题逻辑是将那些具有真假意义的陈述句接着进行符号化，产生原子命题。与此同时，当我们把逻辑代数中的运算符：与(·)、或( + )、非( — )，替换成命题逻辑中的五大联结词：合取( ∧ )、析取( ∨ )、非( ¬ )、蕴涵( → ) 和等价( ↔ ) 之后，我们就进入了命题逻辑的研究领域。</p><p>需要指出的是，命题逻辑也叫作命题演算，后者的出现就是用来讨论前者的。它与下面出现的一阶逻辑（谓词逻辑）都是数理逻辑的子集（或称之为分支），是数理逻辑的两个最基本的也是最重要的组成部分。</p><p>有人可能会问，为什么不从数理逻辑开始，其实意义不大。要谈数理逻辑，不可避免的下一个主题就是逻辑代数。为什么这样说，因为数理逻辑一开始的诞生是没有意义的，它的创始人正是我们熟知的莱布尼茨（没错，就是高数中的那个牛顿-莱布尼茨公式）。莱布尼茨一开始是想要建立一套普遍的符号语言，从而将一些由自然语言的推理转换成用符号演算。但可惜他的工作只是开了个头，而且没有太多的发表，因此影响不大。而真正使数理逻辑这门学科迅速扩张的是开头所说的英国科学家——乔治·布尔，而他所做的正是将逻辑代数化。</p><h3 id="2-1-浅谈数理逻辑与数学和逻辑学">2.1 浅谈数理逻辑与数学和逻辑学</h3><p>数理逻辑又称<u>符号逻辑</u>、<u>理论逻辑</u>，是一门用数学方法研究逻辑或形式逻辑的学科，这是百度词条给出的解释。还有一句话非常拗口：它既是数学的一个分支，也是逻辑学的一个分支。其研究对象是对证明和计算这两个直观概念进行符号化以后的形式系统。说白了，数理逻辑研究的并不是数学领域，而是计算机科学等领域。但归根到底用到的还是数学方法，例如数学方法中的符号的使用、公式的定义等。</p><p>数理逻辑除了跟数学有关，还跟逻辑学有关。其实我一直以为逻辑学是数学的一个分支，但当我检索信息时发现并不是这样简单。因为没有学过逻辑学，只能暂时认为两者的研究对象、研究任务和研究目标是不同的。但最重要的一点是，两者是不可割裂的，因为逻辑出现在数学中，是为了证明数学里面有一个不能证明的，逻辑用来推断未知，那很多未知需要用数学来表现出来。</p><blockquote><p>数学是研究数量、结构、变化以及空间模型等概念的一门学科。透过抽象化和逻辑推理的使用，由计数、计算、量度和对物体形状及运动的观察中产生。主要研究：数量、结构、空间和基础与哲学。<br>逻辑是人的一种抽象思维，是人通过概念、判断、推理、论证来理解和区分客观世界的思维过程。逻辑学就是由上述过程产生的一门学科。逻辑的本质是寻找事物的相对关系，并用已知推断未知。</p></blockquote><h3 id="2-2-命题逻辑的符号化思想">2.2 命题逻辑的符号化思想</h3><p>关于命题逻辑，相信学过离散的人都很熟悉。这里只提一下命题逻辑的符号化思想，这又是一种抽象的方法。数理逻辑的诞生就是代替使用自然语言进行推理，因此必须对其符号化，用元符号进行表示。而这种符号化带来的好处就是消除了自然语言中的二义性，例如 “非 p”，这是一个典型的半符号化命题，自然语言 “非” 会产生二义性，因为你可以把 “非 p” 解释成 “p 不成立” 等。为此，命题逻辑进一步符号化，用 “¬” 来代替 “非”，“不成立” 等。并且还定义一系列规则，比如说：¬p 为真当且仅当 p 为假。</p><p>符号化思想也带来了一些在数理逻辑中不能够处理的麻烦，甚至是一些常见的简单推理。这里引用书上的一个例子，考虑这一命题：<u>凡偶数都能被 2 整除，6 是偶数，所以，6 能被 2 整除。</u>这个问题如果使用命题逻辑中的形式化推理，将无法判断正确性。在命题逻辑中只能将推理中出现的 3 个简单命题依次符号化为 p，q，r，将推理的形式结构符号化为 (p ∧ q) → r，由于该式不是重言式，所以不能够由它判断推理的正确性。问题就出现在这个 “凡” 字，命题逻辑不能够解释这一陈述句的本意。</p><p>为此，引入了一阶逻辑中的主角——量词。</p><h2 id="3-从命题逻辑到一阶逻辑">3. 从命题逻辑到一阶逻辑</h2><p>一阶逻辑也称为谓词逻辑，在命题逻辑中，命题是一个具有真假意义的陈述句，但在推理过程中往往会忽视命题具体想要陈述的本意。因此，我们引入元符号来描述命题逻辑中的简单命题中的每一个成分，再将它们组合起来。也就是分别描述成个体词、谓词和量词。这样一来，在事先定义好的个体域上，个体词 + 谓词 + 量词就可以在推理的形式结构符号化中表述（拼凑出）数学中的简单命题的本意。</p><p>但我的疑问不是为什么引入一阶逻辑，而是一阶逻辑到底是怎么定义的，它跟二阶、高阶逻辑到底是什么关系。</p><h2 id="4-从一阶逻辑到二阶、高阶逻辑">4. 从一阶逻辑到二阶、高阶逻辑</h2><p>作为一个初学者，实在不适合继续再探讨一阶逻辑与二阶、高阶逻辑的区别。但我还是希望能够表达一下自己的看法。</p><p>百度词条对一阶逻辑的解释很粗暴：“一阶逻辑是相对于高阶逻辑存在的数理逻辑，它不允许量化性质。比如说一个物体的颜色，状态等”。这么说，暂时也够用了。但在二阶逻辑中，解除了这一限制，也就是说，谓词能够被量词修饰了，如果对于一个命题中的个体词，它存在任意性质或关系，那么就可以在二阶逻辑中用全称量词来表达。</p><p>举个例子：“对于任意的个体变项 x 和 y，如果 x 和 y 相等，那么对于任意性质或关系 F，F(x) 当且仅当 F(y)。”这在一阶逻辑中是无法表达出来的。因为一阶逻辑只能量化个体，而性质是包含个体的。但当我们引入了二阶逻辑后，就可以表达出来，这句话用二阶逻辑写出来会是这样：∀x∀y( (x=y) → ∀F(F(x) ↔ F(y) )。从中我们可以看到，二阶逻辑可以量化包含个体词的集合（性质或关系），那么依次类推，更高阶的逻辑就是可以量化前一阶所能量化到的集合的集合。</p><p>至于为什么不再探讨高阶逻辑，那已经是逻辑学，集合论的范畴了。我会继续学习并补充下去的。</p><h2 id="5-题外话">5. 题外话</h2><p>有时候，我在电脑前踱步的时候会在想：“数理逻辑的严谨性到底是基于什么？”，这一切可能都源于莱布尼茨发现 0 和 1 之间这一微妙的联系吧。直到今天，我们还沿用基 0 和 1 的二进制，例如计算机系统。</p><blockquote><p>为什么计算机要采用二进制，而不是常用的八进制、十六进制呢？因为任何一种事物、一种状态，要将之量化，最直接、最明了的方法就是将之区分为两极。这不但是事物最根本的状态，也是最利于表达的状态。二进制符合计算机的设计思想，电流的速度是非常快的，而电流最明显的两种状态就是导通和截止，这无疑也适合于二进制的使用。</p><p>因此，在计算机的逻辑电路中，人们就使用 0 和 1 两个数字来代表两种状态。这样一来，一个晶体管就可以用 01 码表示一条信息。集成电路设计已完全采用了二进制语言信息，如果有两个晶体管，就可能产生 01，10，00，11 四种状态的组合，就能表示 4 条信息。依次类推，有 n 个晶体管，就可以表示 2<sup>2</sup> 条信息。由于随着 n 的增长，信息量是按几何级数增长的。所以，可表示的信息状态是极其可观的。</p><p>硅谷的 “八叛徒” 所创办的仙童半导体公司（我们所熟知的英特尔创始人之一的戈登 · 摩尔就来自这里），早在上个世纪就已经用集成电路技术把成千上万个晶体管做在一起，其处理信息的能力是可想而知的。</p></blockquote><p>其实非常凑巧的是，我们前几天才在计算机英语上了解了莱布尼茨，下面截取的是老师给的 PPT，让我们来体会一下：</p><img width=500 src='https://chenshu-1301542311.cos.ap-chengdu.myqcloud.com/typora/莱布尼茨介绍(1).jpg'/><img width=500 src='https://chenshu-1301542311.cos.ap-chengdu.myqcloud.com/typora/莱布尼茨介绍(2).jpg'/><img width=500 src='https://chenshu-1301542311.cos.ap-chengdu.myqcloud.com/typora/莱布尼茨介绍(3).jpg'/><h2 id="6-感谢文章">6. 感谢文章</h2><ul><li><a href="https://wenku.baidu.com/view/7a119fe44afe04a1b071de63.html?from=search" target="_blank" rel="noopener">《数学是什么》</a></li><li><a href="https://wenwen.sogou.com/z/q790010406.htm" target="_blank" rel="noopener">《逻辑学是数学的基础吗？》</a></li><li><a href="http://blog.sina.com.cn/s/blog_539cd8820100mgnc.html" target="_blank" rel="noopener">《逻辑代数、布尔代数、命题逻辑、数理逻辑》</a></li><li><a href="https://www.zhihu.com/question/22915503/answer/151477106" target="_blank" rel="noopener">《一阶逻辑和高阶逻辑的区别，能不能具象一点说明？》</a></li></ul><h2 id="后记">后记</h2><p>不得不感叹，数理逻辑真的把 0(false) 和 1(true) 发挥到了极致。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;此文是在本人学习完离散数学中的数理逻辑部分后，对标题中各部分之间的联系存在很大的疑惑。特此进行总结，水平有限，如有错误，欢迎指出。&lt;/p&gt;
    
    </summary>
    
    
      <category term="离散数学" scheme="http://chenshu.xyz/categories/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/"/>
    
    
  </entry>
  
</feed>
